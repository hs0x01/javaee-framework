/*
 * (C) 2017 NEXT COLORS Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//-----------------------------------------------------------------------------
//    Plugins
//-----------------------------------------------------------------------------
plugins {
	id 'java-library';
	id 'jacoco';
	id 'eclipse-wtp';
	id 'io.franzbecker.gradle-lombok' version '1.11';
}

//-----------------------------------------------------------------------------
//    Import Classes
//-----------------------------------------------------------------------------
import org.gradle.plugins.ide.eclipse.model.Facet;
import org.gradle.plugins.ide.eclipse.model.Facet.FacetType;
import io.franzbecker.gradle.lombok.task.DelombokTask;

//-----------------------------------------------------------------------------
//    Constant Properties
//-----------------------------------------------------------------------------
// ビルド出力ディレクトリ
buildDir = getProperty( 'build.dir.output' );
// コンパイル時の Java バージョン
sourceCompatibility = JavaVersion.VERSION_1_8;
// クラス生成時の Java バージョン
targetCompatibility = JavaVersion.VERSION_1_8;
// コンパイル時に使用する文字エンコーディング
tasks.withType( AbstractCompile )*.options*.encoding = getProperty( 'common.encoding' );

//-----------------------------------------------------------------------------
//    Dependency Management
//-----------------------------------------------------------------------------
// ライブラリ取得先リポジトリ
repositories {
	// JCenter リポジトリ
	jcenter();
}

// 依存関係の設定
dependencies {
	// アノテーションプロセッサ
	annotationProcessor(
		'org.projectlombok:lombok:latest.release'
	);

	// パッケージに含めるライブラリ
	api(
		'com.fasterxml.jackson.core:jackson-databind:latest.release',
		'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:latest.release',
		'com.google.guava:guava:latest.release',
		'com.miragesql:miragesql:latest.release',
		'commons-beanutils:commons-beanutils:latest.release',
		'commons-codec:commons-codec:latest.release',
		'commons-io:commons-io:latest.release',
		'joda-time:joda-time:latest.release',
		'org.apache.commons:commons-collections4:latest.release',
		'org.apache.commons:commons-lang3:latest.release',
		'org.jooq:jooq:latest.release',
		'org.reflections:reflections:latest.release',
		'org.slf4j:slf4j-api:latest.release'
	);

	// コンパイル時にのみ必要なライブラリ
	compileOnly(
		'com.sun.faces:jsf-impl:latest.release',
		'javax:javaee-api:latest.release'
	);
	// アノテーションプロセッサをパッケージから除外
	compileOnly(
		configurations.annotationProcessor
	);

	// テスト時にのみ必要なライブラリ
	testImplementation(
		'org.dbunit:dbunit:latest.release',
		'org.hamcrest:hamcrest-generator:latest.release',
		'org.hamcrest:hamcrest-integration:latest.release',
		'org.jmockit:jmockit:latest.release',
		'org.junit.jupiter:junit-jupiter-api:latest.release'
	);

	// テスト実行時にのみ必要なライブラリ
	testRuntimeOnly(
		'org.junit.jupiter:junit-jupiter-engine:latest.release'
	);
}

//-----------------------------------------------------------------------------
//    Tasks
//-----------------------------------------------------------------------------
// Gradle でビルドする際の使用するバージョン情報を含めたビルドスクリプトファイルなどを生成するためのタスク
// ※ プロジェクトとセットで配布されている場合、何度も実行する必要はない。
//    ラッパーを使用することで、ビルドに使用する Gradle のバージョンを強制することができる。
task wrapper( type: Wrapper, overwrite: true ) {
	description = 'Generates Gradle wrapper files.';
	gradleVersion = getProperty( 'gradle.version' );
}

// JUnit でテストするタスク
test {
	useJUnitPlatform();

	ignoreFailures = true;

	jacoco {
		append = false;
		destinationFile = file( "${buildDir}/jacoco/jacocoTest.exec" );
		classDumpDir = file( "${buildDir}/jacoco/classpathdumps" );
	}
}

// Lombok のタスク
lombok {
	version = getProperty( 'lombok.version' );
}

// Lombok による変換後のソースコードを生成するためのタスク
task delombok( type: DelombokTask ) {
	description = 'Generates delomboked source.';

	ext.outputDir = file( "${buildDir}/${delombok.name}" );

	sourceSets.all {
		if ( it.name != SourceSet.TEST_SOURCE_SET_NAME ) {
			it.allJava.srcDirs.each {
				args( it, '-d', outputDir );
			}
		}
	}
}

// Lombok による変換後のソースコードを生成する際のヘルプを表示するためのタスク
task delombokHelp( type: DelombokTask ) {
	args( '--help' );
}

// Javadoc のタスク
javadoc {
	dependsOn( delombok );

	source = delombok.outputDir;
	failOnError = false;

	options {
		encoding = getProperty( 'common.encoding' );
		charSet = getProperty( 'common.encoding' );
		author = true;
		links(
			'https://commons.apache.org/proper/commons-beanutils/apidocs/',
			'https://commons.apache.org/proper/commons-codec/apidocs/',
			'https://commons.apache.org/proper/commons-collections/apidocs/',
			'https://commons.apache.org/proper/commons-io/javadocs/api-release/',
			'https://commons.apache.org/proper/commons-lang/apidocs/',
			'https://docs.oracle.com/javase/jp/8/docs/api/',
			'https://fasterxml.github.io/jackson-annotations/javadoc/2.9/',
			'https://fasterxml.github.io/jackson-core/javadoc/2.9/',
			'https://fasterxml.github.io/jackson-databind/javadoc/2.9/',
			'https://fasterxml.github.io/jackson-dataformats-binary/javadoc/cbor/2.9/',
			'https://google.github.io/guava/releases/24.1-jre/api/docs/',
			'https://javaee.github.io/javaee-spec/javadocs/',
			'https://projectlombok.org/api/',
			'https://ronmamo.github.io/reflections/',
			'https://www.javadoc.io/doc/com.miragesql/miragesql/2.0.0',
			'https://www.joda.org/joda-time/apidocs/',
			'https://www.jooq.org/javadoc/3.10.x/',
			'https://www.slf4j.org/apidocs/'
		);
	}
}

// JaCoCo（Java Code Coverage Library）のタスク
jacoco {
	toolVersion = getProperty( 'jacoco.version' );
}

// JaCoCo（Java Code Coverage Library）でカバレッジレポートを生成するタスク
jacocoTestReport {
	description = 'Generates JaCoCo coverage reports after running tests.';
}

// Eclipse プロジェクトのタスク
eclipse {
	// WTP（Web Tools Platform）の設定
	wtp {
		// プロジェクト・ファセットの設定
		facet {
			// Java
			facet( type: FacetType.fixed, name: 'java' );
			facet( type: FacetType.installed, name: 'java', version: JavaVersion.VERSION_1_8 );

			file {
				beforeMerged {
					List<Facet> facets = it.facets;

					// 既存の設定内容をクリア
					facets.clear();
				}

				whenMerged {
					List<Facet> facets = it.facets;

					// ファセットの種類、ファセット名でソート
					facets.sort { facet1, facet2 ->
						if ( facet1.type == facet2.type ) {
							return facet1.name.compareTo( facet2.name );
						}

						return facet1.type.name().compareTo( facet2.type.name() );
					}
				}
			}
		}
	}
}
